# Examfragment compiler project 11



class hello:

    def _compileVarDec(self):
        scope = self._next() # var
        typeDecl = self._next() # type

        while True:
            identifier = self._next() # name
            self._methodST.define(identifier[1], scope[1], typeDecl[1])

            symbol = self._next() # , or ;
            if symbol[1] == ';':
                break

    def _compileIf(self):
        self._next('if')  # if

        self._next('(')  # (
        self._compileExpression()
        self._next(')')  # )

        self._vmWriter.writeArithmetic('not')
        label1 = self._newLabel('IF')
        label2 = self._newLabel('IF')
        self._vmWriter.writeIf(label1)

        self._next('{')  # {
        self._compileStatements()
        self._next('}')  # }
        self._vmWriter.writeGoto(label2)

        self._vmWriter.writeLabel(label1)
        if self._lookAhead[1] == 'else':
            self._next('else')  # else
            self._next('{')  # {
            self._compileStatements()
            self._next('}')  # }

        self._vmWriter.writeLabel(label2)

# Example Jack program

    # Returns the next mask (the mask that should follow the given mask). */
    def nextMask(int mask):
    	if (mask = 0):
    	    return 1
        else:
	        return mask * 2;
    	

    # Code generated by _compileIf for function nextMask

// function int nextMask(int mask)
    function Main.nextMask 0
	push argument 0
	push constant 0
	eq
	not
	if-goto IF7
	push constant 1
	return
	goto IF8
label IF7
	push argument 0
	push constant 2
	call Math.multiply 2
	return
label IF8
