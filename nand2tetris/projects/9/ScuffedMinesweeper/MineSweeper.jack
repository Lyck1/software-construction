class MineSweeper {
    field int direction;    // direction of square
    field Square square;    // square


    constructor MineSweeper new() {
        // constructs square
        let square = Square.new(2,2,60,64);
        let direction = 0;
        do draw();
        return this;
    }

    // Draws a grid for the game
    method void draw() {
        do Screen.setColor(true);
        do Screen.drawLine(0,0,511,0);
        do Screen.drawLine(0,1,0,255);
        do Screen.drawLine(1,255,511,255);
        do Screen.drawLine(511,1,511,254);
        do Screen.drawLine(1,64,511,64);
        do Screen.drawLine(1,128,511,128);
        do Screen.drawLine(1,192,511,192);

        do Screen.drawLine(64,1,64,255);
        do Screen.drawLine(128,1,128,255);
        do Screen.drawLine(192,1,192,255);
        do Screen.drawLine(256,1,256,255);
        do Screen.drawLine(320,1,320,255);
        do Screen.drawLine(384,1,384,255);
        do Screen.drawLine(448,1,448,255);
        
        return;
    }



    /** Disposes this game. */
    method void dispose() {
        do square.dispose();
        do Memory.deAlloc(this);
        return;
    }

    /** Moves the square in the current direction and promptly sets direction to zero after moving once */
    method void moveSquare() {
        if (direction = 1) { do square.moveUp(); let direction = 0;}
        if (direction = 2) { do square.moveDown(); let direction = 0;}
        if (direction = 3) { do square.moveLeft(); let direction = 0;}
        if (direction = 4) { do square.moveRight(); let direction = 0;}
        do Sys.wait(5);  // delays the next movement
        return;
    }

    /** Runs the game: handles the user's inputs and moves the square accordingly */
    method void run() {
        var char key;  // the key currently pressed by the user
        var boolean exit;
        let exit = false;
      
        while (~exit) {
        // waits for a key to be pressed
            while (key = 0) {
                let key = Keyboard.keyPressed();
                do moveSquare();
            }
            if (key = 81)  { let exit = true; }     // q key
            if (key = 131) { let direction = 1; }   // up arrow
            if (key = 133) { let direction = 2; }   // down arrow
            if (key = 130) { let direction = 3; }   // left arrow
            if (key = 132) { let direction = 4; }   // right arrow
            // space key checks for mine
            if (key = 32)  { 
                if (square.checkMine() = 1) { 
                    let exit = true;
                } 
            }   

            // waits for the key to be released
            while (~(key = 0)) {
                let key = Keyboard.keyPressed();
                do moveSquare();
            }
        }
        return;
    }
}
